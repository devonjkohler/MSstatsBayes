install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
check_cmdstan_toolchain()
library(cmdstanr)
check_cmdstan_toolchain()
install_cmdstan(cores = 4)
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
install_cmdstan(cores = 4)
cmdstan_path()
setwd("E:/OneDrive - Northeastern University/Northeastern/Research/MS_data/Bulk/SRM-ControlledMixture-20240520T221808Z-001/SRM-ControlledMixture")
raw <- read.csv("ControlMixture_SRM_input.csv")
annotation <- read.csv("ControlMixture_SRM_annotation.csv")
head(raw)
head(annotation)
setwd("~/R_Packages/MSstatsBayes")
devtools::document()
devtools::document()
devtools::document()
library(MSstatsBayes)
quant <- raw
dataProcessBayes(quant)
library(MSstatsBayes)
dataProcessBayes(quant)
library(MSstatsBayes)
dataProcessBayes(quant)
library(MSstatsBayes)
library(MSstatsBayes)
dataProcessBayes(quant)
options(error=recover)
library(MSstatsBayes)
dataProcessBayes(quant)
View(MSstatsPrepareForDataProcess)
View(MSstats::MSstatsPrepareForDataProcess)
library(MSstatsBayes)
dataProcessBayes(quant)
quant
library(MSstatsBayes)
dataProcessBayes(quant)
library(data.table)
dataProcessBayes(quant)
raw
dataProcessBayes(quant)
raw
unclass(raw)
as.data.table(unclass(raw))
raw
library(MSstatsBayes)
library(MSstatsBayes)
dataProcessBayes(quant)
devtools::document()
library(MSstatsBayes)
dataProcessBayes(quant)
options(error=recover)
dataProcessBayes(quant)
dataProcessBayes(quant)
data
data.table::dcast(data, FEATURE~RUN, value.var = "ABUNDANCE")
wide_data = data.table::dcast(data, FEATURE~RUN, value.var = "ABUNDANCE")
library(MSstatsBayes)
dataProcessBayes(quant)
dataProcessBayes(quant)
data = data[data$LABEL != "H", ]
data
wide_data = data.table::dcast(data, FEATURE~RUN, value.var = "ABUNDANCE")
wide_data
wide_data[, FEATURE := NULL]
wide_data
wide_data[, FEATURE := NULL]
wide_data[, "FEATURE" := NULL]
is.data.table(wide_data)
wide_data[, FEATURE := NULL]
wide_data
as.data.table(wide_data)
devtools::document()
library(MSstatsBayes)
dataProcessBayes(quant)
wide_data = data.table::dcast(data, FEATURE~RUN, value.var = "ABUNDANCE")
wide_data[, FEATURE := NULL]
dpc_params = dpc(wide_data)
is.na(wide_data)
sum(is.na(wide_data))
View(dpc)
y=wide_data
dp <- rowMeans(!is.na(y))
dp
!is.na(y)
rowMeans(!is.na(y))
dp <- rowMeans(!is.na(y))
wt <- rep(ncol(y), nrow(y))
wt
hp <- hyperparams(y)
hp
?dpc
dataProcessBayes(quant)
wide_data
wide_data[is.na(7), ]
wide_data[is.na(1), ]
wide_data[is.na(2), ]
wide_data[is.na(3), ]
wide_data[is.na(4), ]
wide_data[is.na(5), ]
wide_data[is.na(6), ]
wide_data[is.na(7), ]
wide_data[is.na(8), ]
wide_data[is.na(9), ]
wide_data[is.na(10), ]
wide_data[is.na(11), ]
wide_data[is.na(12), ]
wide_data[is.na(13), ]
wide_data[is.na(14), ]
wide_data[is.na(15), ]
dataProcessBayes(quant)
wide_data
dataProcessBayes(quant)
data
data[data$PROTEIN=="MCCB",]
data[is.na(data$ABUNDANCE),]
data[data$PROTEIN=="IVD",]
setwd("E:/OneDrive - Northeastern University/Northeastern/Research/MS_data/Bulk/DDA_ControlledMix")
##############################
library(MSstats)
##############################
## Read Skyline report
##############################
raw <- read.csv("ControlMixture_DDA_Skyline_input.csv")
annotation <- read.csv("ControlMixture_DDA_Skyline_annotation.csv")
head(raw)
head(annotation)
##############################
## Extra filtering for this dataset :
## 1: remove 'precursor -64'
unique(raw$Fragment.Ion)
raw <- raw[which(raw$Fragment.Ion %in% c( "precursor", "precursor [M+1]","precursor [M+2]")), ]
##############################
## Make MSstats required format
##############################
quant <- SkylinetoMSstatsFormat(raw,
annotation = annotation,
fewMeasurements="remove", ## same as default
removeProtein_with1Feature = TRUE)
head(raw)
dataProcessBayes(raw)
dataProcessBayes(quant)
dpc_params = dpc(wide_data)
dpc_params$beta
?protDP
plotDPC(dpc_params$dpcFit)
protDP::plotDPC(dpc_params$dpcFit)
protDP::plotDPC(dpc_params$dpcFit, jitter.amount = 1/ncol(dat)/2, point.cex = 0.1)
dataProcessBayes(quant)
data_list = remove_missing_runs(data)
data_list
data = data_list[[1]]
missing_data = data_list[[2]]
missing_data
data
format_data = format_data(data)
format_data
priors = get_priors(data)
priors
head(data)
library(MSstatsBayes)
dataProcessBayes(quant)
priors = calculate_priors(data)
devtools::document()
setwd("~/R_Packages/MSstatsBayes")
devtools::document()
devtools::document()
library(MSstatsBayes)
dataProcessBayes(quant)
priors
priors = calculate_priors(data)
library(tidyverse)
priors = calculate_priors(data)
library(MASS)
priors = calculate_priors(data)
library(MSstatsBayes)
priors = calculate_priors(data)
dataProcessBayes(quant)
priors = calculate_priors(data)
priors
priors = calculate_priors(data)
run_priors
run_summary
head(data)
library(MSstatsBayes)
dataProcessBayes(quant)
run_summary
run_priors
fitdistr(run_summary$run_mean, "normal")
feature_summary = data %>% merge(run_summary, by = c("PROTEIN", "RUN")) %>%
mutate(feature_intensity = ABUNDANCE - run_mean) %>% group_by(FEATURE) %>%
summarize(feature_mean = mean(feature_intensity, na.rm=TRUE),
feature_sd = sd(feature_intensity, na.rm=TRUE))
feature_summary
library(MSstatsBayes)
dataProcessBayes(quant)
priors = calculate_priors(data)
priors
format_data
results = flatten_input(format_data)
results
input = results[[1]]
input
lookup_table = results[[2]]
lookup_table
input
library(MSstatsBayes)
dataProcessBayes(quant)
dataProcessBayes(quant)
input
input[, c("Protein_run_idx", "Protein_feature_idx")]
quant
quant %>% distinct(ProteinName)
quant %>% distinct(ProteinName) %>% unlist()
quant %>% distinct(ProteinName) %>% unlist() %>% top_n(10)
quant %>% distinct(ProteinName) %>% unlist() %>% sample(10)
set.seed(2)
samples = quant %>% distinct(ProteinName) %>% unlist() %>% sample(20)
quant = quant %>% filter(ProteinName %in% samples)
quant = as.data.frame(quant) %>% filter(ProteinName %in% samples)
quant
dataProcessBayes(quant)
library(MSstatsBayes)
dataProcessBayes(quant)
input[, c("Protein_run_idx", "Protein_feature_idx")]
dummy_cols(
input[, c("Protein_run_idx", "Protein_feature_idx")])
as.character(input[, c("Protein_run_idx", "Protein_feature_idx")]))
as.character(input[, c("Protein_run_idx", "Protein_feature_idx")]))
as.character(input[, c("Protein_run_idx", "Protein_feature_idx")])
temp = input[, c("Protein_run_idx", "Protein_feature_idx")]
temp = lapply(temp, as.character)
temp
temp
input[, c("Protein_run_idx", "Protein_feature_idx")]
temp = input[, c("Protein_run_idx", "Protein_feature_idx")]
temp
temp[] = lapply(temp, as.character)
temp
dummy_cols(
temp)
dummy_cols(temp) %>%
dplyr::select(-Protein_run_idx, -Protein_feature_idx)
X = dummy_cols(temp) %>%
dplyr::select(-Protein_run_idx, -Protein_feature_idx) %>% as.matrix()
input
is.na(input$ABUNDANCE)
sum(is.na(input$ABUNDANCE))
missing_X = X[is.na(input$ABUNDANCE), ]
missing_X
priors
run_priors
library(MSstatsBayes)
library(MSstatsBayes)
dataProcessBayes(quant)
library(MSstatsBayes)
dataProcessBayes(quant)
library(MSstatsBayes)
devtools::document()
library(MSstatsBayes)
dataProcessBayes(quant)
library(MSstatsBayes)
dataProcessBayes(quant)
fit = model$sample(
data = stan_input,
seed = 123,
chains = 4,
parallel_chains = 4,
refresh = 500 # print update every 500 iters
)
library(MSstatsBayes)
dataProcessBayes(quant)
dataProcessBayes(quant)
length(input$ABUNDANCE)
num_runs
num_feat
X[,1:num_runs]
temp
input
length(input$ABUNDANCE)
num_runs
num_feat
X[,1:num_runs]
dim(X[,1:num_runs])
dim(X[,(num_runs+1):(num_runs+num_feat)])
num_feat
library(MSstatsBayes)
dataProcessBayes(quant)
fit = model$sample(
data = stan_input,
seed = 123,
chains = 4,
parallel_chains = 4,
refresh = 500 # print update every 500 iters
)
fit
quant <- SkylinetoMSstatsFormat(raw,
annotation = annotation,
fewMeasurements="remove", ## same as default
removeProtein_with1Feature = TRUE)
set.seed(2)
samples = quant %>% distinct(ProteinName) %>% unlist() %>% sample(10)
quant = as.data.frame(quant) %>% filter(ProteinName %in% samples)
library(MSstatsBayes)
dataProcessBayes(quant)
feature_data
feature_data[, "imp_mean"] = 0
feature_data[, "imp_sd"] = 0
feature_data
feature_data
rstan::summary(fit, pars="feature")
extract_values = function(fit, n_proteins, n_runs){
# Subset model into runs and sigmas
# model_overview = summary(fit)$summary
model_overview = fit$summary()
run_results = model_overview[grepl("R\\[", model_overview$variable), ]
sigma_results = model_overview[grepl("sigma\\[", model_overview$variable), "mean"]
# Grab summaries
summarized_values = run_results$mean
# Grab errors
R_errors = run_results$sd
errors = sqrt(sigma_results$mean^2 + R_errors^2)
return(list("summarized" = summarized_values,
"errors" = errors))
}
feature_data
feature_data[, "Protein"]
feature_data[, "PROTEIN"]
unique(feature_data[, "PROTEIN"])
nrow(unique(feature_data[, "PROTEIN"]))
nrow(unique(feature_data[, c("PROTEIN", "RUN")]))
unique(feature_data[, c("PROTEIN", "RUN")])
n_runs = nrow(unique(feature_data[, c("PROTEIN", "RUN")]))
n_runs
n_proteins
n_proteins = nrow(unique(feature_data[, "PROTEIN"]))
"]))
)
)
""
n_proteins = nrow(unique(feature_data[, "PROTEIN"]))
n_proteins
n_runs = nrow(unique(feature_data[, c("PROTEIN", "RUN")]))
n_runs
model_output = extract_values(fit, n_proteins, n_runs)
model_output
results = as.data.frame(model_output)
results
results$Protein_run_idx = seq_len(nrow(results))
results
feature_data = merge(feature_data, results, all.x=TRUE,
by="Protein_run_idx")
feature_data
setwd("C:/Users/Devon Kohler/Downloads")
setwd("C:/Users/Devon Kohler/Downloads")
load(file="top3.rda")
library(MSstats)
library(MSstatsTMT)
library(tidyverse)
library(data.table)
unique(dia_top_3$ProteinLevelData$RUN)
unique(dia_top_3$ProteinLevelData$GROUP)
dia_top_3$ProteinLevelData$GROUP = as.factor(
dia_top_3$ProteinLevelData$GROUP,
levels=c("DMSO", "Dasatinib_001nM",
"Dasatinib_003nM", "Dasatinib_010nM",
"Dasatinib_030nM", "Dasatinib_100nM", "Dasatinib_300nM",
"Dasatinib_001uM", "Dasatinib_003uM")
)
dia_top_3$ProteinLevelData$GROUP = factor(
dia_top_3$ProteinLevelData$GROUP,
levels=c("DMSO", "Dasatinib_001nM",
"Dasatinib_003nM", "Dasatinib_010nM",
"Dasatinib_030nM", "Dasatinib_100nM", "Dasatinib_300nM",
"Dasatinib_001uM", "Dasatinib_003uM")
)
dia_top_3$FeatureLevelData$GROUP = factor(
dia_top_3$ProteinLevelData$GROUP,
levels=c("DMSO", "Dasatinib_001nM",
"Dasatinib_003nM", "Dasatinib_010nM",
"Dasatinib_030nM", "Dasatinib_100nM", "Dasatinib_300nM",
"Dasatinib_001uM", "Dasatinib_003uM")
)
source("C:/Users/Devon Kohler/Downloads/normalization_analysis.R", echo=TRUE)
dia_top_3$FeatureLevelData$GROUP = factor(
dia_top_3$FeatureLevelData$GROUP,
levels=c("DMSO", "Dasatinib_001nM",
"Dasatinib_003nM", "Dasatinib_010nM",
"Dasatinib_030nM", "Dasatinib_100nM", "Dasatinib_300nM",
"Dasatinib_001uM", "Dasatinib_003uM")
)
dataProcessPlots(dia_top_3,
type="ProfilePlot",
which.Protein="P12931",
featureName = "NA",
ylimUp = 12,
ylimDown = 0,
address=FALSE)
