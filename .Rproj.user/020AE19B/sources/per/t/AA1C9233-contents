
##############################
#### Analysis in MSstats
##############################

##############################
## Load MSstats package
##############################
library(MSstats)

##############################
## Read Skyline report
##############################
raw <- read.csv("ControlMixture_DDA_Skyline_input.csv")
annotation <- read.csv("ControlMixture_DDA_Skyline_annotation.csv")
head(raw)
head(annotation)


##############################
## Extra filtering for this dataset :
## 1: remove 'precursor -64'
unique(raw$Fragment.Ion)
raw <- raw[which(raw$Fragment.Ion %in% c( "precursor", "precursor [M+1]","precursor [M+2]")), ]


##############################
## Make MSstats required format
##############################
quant <- SkylinetoMSstatsFormat(raw,
                                annotation = annotation,
                                fewMeasurements="remove", ## same as default
                                removeProtein_with1Feature = TRUE)

set.seed(2)
samples = quant %>% distinct(ProteinName) %>% unlist() %>% sample(10)
quant = as.data.frame(quant) %>% filter(ProteinName %in% samples)

quant = as.data.frame(quant)
quant$Feature = paste(quant$PeptideSequence,
                      quant$PrecursorCharge, sep="_")
quant = as.data.frame(quant) %>%
  select(ProteinName, Condition, Run, Feature, Intensity)
quant$Intensity = log2(quant$Intensity)
quant$Missing = ifelse(is.na(quant$Intensity), 1, 0)
quant = quant %>% rename(c(Protein = ProteinName))
write.csv(quant, file="ControlMix_DDA_input.csv", row.names = FALSE)

## count the number of proteins
length(unique(quant$ProteinName)) # 1244

##############################
## dataProcess
## including Normalization, decide censored cutoff, protein-level summarization
##############################

processed.quant <- dataProcess(quant,
                               normalization = 'equalizeMedians',
                               summaryMethod="TMP",
                               featureSubset="highQuality",
                               remove_uninformative_feature_outlier=TRUE,
                               # cutoffCensored="minFeature",
                               censoredInt="0",
                               MBimpute=TRUE,
                               maxQuantileforCensored=0.999)

save(processed.quant, file='processed.quant.rda')


noisy = processed.quant$FeatureLevelData %>% filter(feature_quality == "Uninformative") %>% distinct(PROTEIN) ##Noisy
outlier = processed.quant$FeatureLevelData %>% filter(is_outlier == TRUE) %>% distinct(PROTEIN) ##outlier

intersect(noisy, outlier)

processed.quant$FeatureLevelData %>% filter(PROTEIN == "SS1_P02754")


processed.quant$FeatureLevelData %>% filter(PROTEIN == "P0A867") %>%
  mutate(logIntensity = log2(INTENSITY)) %>% ggplot() +
  geom_line(aes(x = RUN, y = logIntensity, group=FEATURE, color=FEATURE), size=1.25) +
  geom_point(aes(x = RUN, y = logIntensity, group=FEATURE, color=FEATURE ), size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() + labs(title="P0A867", x="MS Run", y="Log Intensity") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(values=c("#999999", "#E69F00"))

processed.quant$FeatureLevelData %>% filter(PROTEIN == "P0A867") %>%
  mutate(logIntensity = log2(INTENSITY)) %>% ggplot() +
  geom_line(aes(x = RUN, y = logIntensity, group=FEATURE), color="grey" , size=1.25) +
  geom_point(aes(x = RUN, y = logIntensity, group=FEATURE, color=is_outlier ), size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() + labs(title="P0A867", x="MS Run", y="Log Intensity") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(values=c("#999999", "#E69F00"))

processed.quant$FeatureLevelData %>% filter(PROTEIN == "P0A867") %>%
  mutate(logIntensity = log2(INTENSITY)) %>% ggplot() +
  geom_line(aes(x = RUN, y = logIntensity, group=FEATURE, color=feature_quality) , size=1.25) +
  geom_point(aes(x = RUN, y = logIntensity, group=FEATURE, color=feature_quality ), size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() +
  labs(title="P0A867", x="MS Run", y="Log Intensity", color="Noisy Feature") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(labels = c("FALSE", "TRUE"), values=c("#999999", "#E69F00"))


processed.quant <- dataProcess(quant,
                               normalization = 'equalizeMedians',
                               summaryMethod="TMP",
                               featureSubset="topN",
                               # cutoffCensored="minFeature",
                               censoredInt="0",
                               MBimpute=TRUE,
                               maxQuantileforCensored=0.999)

processed.quant$FeatureLevelData %>% filter(PROTEIN == "P0A867") %>%
  mutate(logIntensity = log2(INTENSITY)) %>% ggplot() +
  geom_line(aes(x = RUN, y = logIntensity, group=FEATURE, color=remove) , size=1.25) +
  geom_point(aes(x = RUN, y = logIntensity, group=FEATURE, color=remove ), size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() +
  labs(title="P0A867", x="MS Run", y="Log Intensity", color="Top Feature") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(labels = c("TRUE", "FALSE"), values=c("#E69F00", "#999999"))#


all_quant <- dataProcess(quant,
                         normalization = 'equalizeMedians',
                         summaryMethod="TMP",
                         featureSubset="all",
                         # cutoffCensored="minFeature",
                         censoredInt="0",
                         MBimpute=TRUE,
                         maxQuantileforCensored=0.999)

topn_quant <- dataProcess(quant,
                         normalization = 'equalizeMedians',
                         summaryMethod="TMP",
                         featureSubset="topN",
                         # cutoffCensored="minFeature",
                         censoredInt="0",
                         MBimpute=TRUE,
                         maxQuantileforCensored=0.999)

highQuality_quant <- dataProcess(quant,
                          normalization = 'equalizeMedians',
                          summaryMethod="TMP",
                          featureSubset="highQuality",
                          remove_uninformative_feature_outlier=TRUE,
                          censoredInt="0",
                          MBimpute=TRUE,
                          maxQuantileforCensored=0.999)



processed.quant$FeatureLevelData %>% filter(PROTEIN == "P0A867") %>%
  mutate(logIntensity = log2(INTENSITY)) %>% ggplot() +
  geom_line(aes(x = RUN, y = logIntensity, group=FEATURE, color=remove) , size=1.25) +
  geom_point(aes(x = RUN, y = logIntensity, group=FEATURE, color=remove ), size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() +
  labs(title="P0A867", x="MS Run", y="Log Intensity", color="Top Feature") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(labels = c("TRUE", "FALSE"), values=c("#E69F00", "#999999"))#




## Summarized results
ggplot() +
  geom_line(data = all_quant$FeatureLevelData %>% filter(PROTEIN == "P0A867") %>%
              mutate(logIntensity = log2(INTENSITY)),
            aes(x = RUN, y = logIntensity, group=FEATURE), color="grey", size=1.25, alpha=.75) +
  geom_point(data = all_quant$FeatureLevelData %>% filter(PROTEIN == "P0A867") %>%
               mutate(logIntensity = log2(INTENSITY)),
             aes(x = RUN, y = logIntensity, group=FEATURE), color="grey", size=4., alpha=.75) +
  geom_line(data = all_quant$ProteinLevelData %>% filter(Protein == "P0A867"),
            aes(x = RUN, y = LogIntensities, group=Protein), color="red", size=1.25) +
  geom_point(data = all_quant$ProteinLevelData %>% filter(Protein == "P0A867"),
             aes(x = RUN, y = LogIntensities, group=Protein), color="red", size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() +
  labs(title="All Features", x="MS Run", y="Log Intensity", color="Label") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(values=c("#E69F00", "#999999")) + ylim(22.,30.)

ggplot() +
  geom_line(data = topn_quant$FeatureLevelData %>% filter(PROTEIN == "P0A867" & remove==FALSE) %>%
              mutate(logIntensity = log2(INTENSITY)),
            aes(x = RUN, y = logIntensity, group=FEATURE), color="grey", size=1.25, alpha=.75) +
  geom_point(data = topn_quant$FeatureLevelData %>% filter(PROTEIN == "P0A867" & remove==FALSE) %>%
               mutate(logIntensity = log2(INTENSITY)),
             aes(x = RUN, y = logIntensity, group=FEATURE), color="grey", size=4., alpha=.75) +
  geom_line(data = topn_quant$ProteinLevelData %>% filter(Protein == "P0A867"),
            aes(x = RUN, y = LogIntensities, group=Protein), color="red", size=1.25) +
  geom_point(data = topn_quant$ProteinLevelData %>% filter(Protein == "P0A867"),
             aes(x = RUN, y = LogIntensities, group=Protein), color="red", size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() +
  labs(title="Top 3 Features", x="MS Run", y="Log Intensity", color="Label") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(values=c("#E69F00", "#999999")) + ylim(22.,30.)

ggplot() +
  geom_line(data = highQuality_quant$FeatureLevelData %>% filter(PROTEIN == "P0A867" &
                                                                   feature_quality=="Informative" &
                                                                   is_outlier==FALSE) %>%
              mutate(logIntensity = log2(INTENSITY)),
            aes(x = RUN, y = logIntensity, group=FEATURE), color="grey", size=1.25, alpha=.75) +
  geom_point(data = highQuality_quant$FeatureLevelData %>% filter(PROTEIN == "P0A867" &
                                                                    feature_quality=="Informative" &
                                                                    is_outlier==FALSE) %>%
               mutate(logIntensity = log2(INTENSITY)),
             aes(x = RUN, y = logIntensity, group=FEATURE), color="grey", size=4., alpha=.75) +
  geom_line(data = highQuality_quant$ProteinLevelData %>% filter(Protein == "P0A867"),
            aes(x = RUN, y = LogIntensities, group=Protein), color="red", size=1.25) +
  geom_point(data = highQuality_quant$ProteinLevelData %>% filter(Protein == "P0A867"),
             aes(x = RUN, y = LogIntensities, group=Protein), color="red", size=4.) +
  geom_vline(xintercept=c(3.5,6.5,9.5,12.5), linetype="dashed", size=1) +
  theme_bw() +
  labs(title="High Quality Features", x="MS Run", y="Log Intensity", color="Label") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16)) +
  scale_color_manual(values=c("#E69F00", "#999999")) + ylim(22.,30.)

topn_quant$ProteinLevelData %>% filter(Protein == "P0A867")
highQuality_quant$ProteinLevelData %>% filter(Protein == "P0A867")

comparison1<-matrix(c(1,-1,0,0,0),nrow=1)
comparison2<-matrix(c(1,0,-1,0,0),nrow=1)
comparison3<-matrix(c(1,0,0,-1,0),nrow=1)
comparison4<-matrix(c(1,0,0,0,-1),nrow=1)
comparison5<-matrix(c(0,1,-1,0,0),nrow=1)
comparison6<-matrix(c(0,1,0,-1,0),nrow=1)
comparison7<-matrix(c(0,1,0,0,-1),nrow=1)
comparison8<-matrix(c(0,0,1,-1,0),nrow=1)
comparison9<-matrix(c(0,0,1,0,-1),nrow=1)
comparison10<-matrix(c(0,0,0,1,-1),nrow=1)
comparison<-rbind(comparison1,comparison2, comparison3, comparison4, comparison5,
                  comparison6, comparison7, comparison8, comparison9, comparison10)
row.names(comparison)<-c("M1-M2", "M1-M3", "M1-M4", "M1-M5", "M2-M3",
                         "M2-M4", "M2-M5", "M3-M4", "M3-M5", "M4-M5")
colnames(comparison) = c("Condition1", "Condition2", "Condition3",
                         "Condition4", "Condition5")




## Model results
all.MSstats <- groupComparison(contrast.matrix=comparison, data=all_quant)
all.MSstats <- all.MSstats$ComparisonResult
all.MSstats %>% filter(Protein == "P0A867")

topn.MSstats <- groupComparison(contrast.matrix=comparison, data=topn_quant)
topn.MSstats <- topn.MSstats$ComparisonResult
topn.MSstats %>% filter(Protein == "P0A867")


highQuality.MSstats <- groupComparison(contrast.matrix=comparison, data=highQuality_quant)
highQuality.MSstats <- highQuality.MSstats$ComparisonResult
highQuality.MSstats %>% filter(Protein == "P0A867")

all = all.MSstats %>% filter(Protein == "P0A867")
all$Features = "All"
top = topn.MSstats %>% filter(Protein == "P0A867")
top$Features = "Top 3"
hq = highQuality.MSstats %>% filter(Protein == "P0A867")
hq$Features = "High Quality"

cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442",
               "#0072B2", "#D55E00", "#CC79A7", "#999999")

rbind(all, top, hq) %>%
  mutate(Features = factor(Features, levels = c("All", "Top 3", "High Quality"))) %>%
  filter(Label %in% c("M1-M2", "M2-M3", "M2-M4", "M3-M5")) %>%
  ggplot() +
  geom_bar(aes(x=Label, y=log2FC, fill=Features),
           stat='identity', position = "dodge") +
  scale_fill_manual(values=cbPalette) +
  theme_bw() +
  labs(title="P0A867 Fold Change Comparison",
       x="Comparison", y="Log Fold Change") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16))

rbind(all, top, hq) %>%
  mutate(Features = factor(Features, levels = c("All", "Top 3", "High Quality"))) %>%
  filter(Label %in% c("M1-M2")) %>%
  ggplot() +
  geom_bar(aes(x=Label, y=SE, fill=Features),
           stat='identity', position = "dodge") +
  scale_fill_manual(values=cbPalette) +
  theme_bw() +
  labs(title="P0A867 Standard Error Comparison",
       x="Comparison", y="Standard Error") +
  theme(axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 16),
        legend.text=element_text(size=12),
        legend.title=element_text(size=14),
        axis.title.y = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        title = element_text(size = 22),
        strip.text = element_text(size = 16))

##############################
## Data visualization
##############################

dataProcessPlots(processed.quant, type="QCplot",
                 ylimDown=0,
                 which.Protein = 'allonly',
                 width=7, height=7,
                 address="ControlMixture_DDA_Skyline_")

dataProcessPlots(processed.quant, type="Profileplot",
                 ylimDown=0,
                 originalPlot = TRUE,
                 summaryPlot = TRUE,
                 width=7, height=7,
                 address="ControlMixture_DDA_Skyline_")

dataProcessPlots(processed.quant, type="Conditionplot",
                 ylimDown=0,
                 width=7, height=7,
                 address="ControlMixture_DDA_Skyline_")


##############################
## Model-based comparison + adjust p-value
##############################

test.MSstats <- groupComparison(contrast.matrix=comparison, data=processed.quant)
test.MSstats <- test.MSstats$ComparisonResult

spike = c('P02701', 'P00915', 'Q3SX14', 'P00711', 'P02787', 'P00563',
          'Q29443', 'P02663', 'P02769', 'Q29550', 'P01008', 'Q58D62',
          'P0CG53', 'P00921', 'P00698', 'P68082', 'P05307', 'P00004',
          'P00432', 'P61769', 'P00711', 'P02754', 'P02662', 'P00442',
          'P24627', 'P01012', 'P01133', 'P80025', 'P02666', 'P02753')

as.data.frame(quant) %>% filter(ProteinName == "P00915")

s1_tp = c("M1-M2", "M1-M3", "M1-M4", "M2-M3",
          "M2-M5", "M3-M4", "M3-M5", "M4-M5")
s1_tn = c("M1-M5", "M2-M4")

s2_tp = c("M1-M2", "M1-M3", "M1-M4", "M1-M5",
          "M2-M3", "M2-M5", "M3-M4", "M4-M5")
s2_tn = c("M3-M5", "M2-M4")

s3_tp = c("M1-M2", "M1-M3", "M1-M5", "M2-M3",
          "M2-M4", "M2-M5", "M3-M4", "M4-M5")
s3_tn = c("M3-M5", "M1-M4")

test.MSstats$ComparisonResult %>% filter((grepl("SS1", Protein) &
                                           (Label %in% s1_tp) & adj.pvalue < .05) |
                                           (grepl("SS2", Protein) &
                                              (Label %in% s2_tp) & adj.pvalue < .05) |
                                           (grepl("SS3", Protein) &
                                              (Label %in% s3_tp) & adj.pvalue < .05)
                                         )

compare_models = function(input_data,
                          feature_filtering_method,
                          feature_filtering_info=FALSE,
                          n_top_feature = 3){

  processed.quant <- dataProcess(input_data,
                                 normalization = 'equalizeMedians',
                                 featureSubset = feature_filtering_method,
                                 remove_uninformative_feature_outlier = feature_filtering_info,
                                 n_top_feature = n_top_feature,
                                 summaryMethod="TMP",
                                 censoredInt="NA",
                                 MBimpute=TRUE,
                                 maxQuantileforCensored=0.999)


  comparison1<-matrix(c(1,-1,0,0,0),nrow=1)
  comparison2<-matrix(c(1,0,-1,0,0),nrow=1)
  comparison3<-matrix(c(1,0,0,-1,0),nrow=1)
  comparison4<-matrix(c(1,0,0,0,-1),nrow=1)
  comparison5<-matrix(c(0,1,-1,0,0),nrow=1)
  comparison6<-matrix(c(0,1,0,-1,0),nrow=1)
  comparison7<-matrix(c(0,1,0,0,-1),nrow=1)
  comparison8<-matrix(c(0,0,1,-1,0),nrow=1)
  comparison9<-matrix(c(0,0,1,0,-1),nrow=1)
  comparison10<-matrix(c(0,0,0,1,-1),nrow=1)
  comparison<-rbind(comparison1,comparison2, comparison3, comparison4, comparison5,
                    comparison6, comparison7, comparison8, comparison9, comparison10)
  row.names(comparison)<-c("M1-M2", "M1-M3", "M1-M4", "M1-M5", "M2-M3",
                           "M2-M4", "M2-M5", "M3-M4", "M3-M5", "M4-M5")
  colnames(comparison) = c("Condition1", "Condition2", "Condition3",
                           "Condition4", "Condition5")

  test.MSstats <- groupComparison(contrast.matrix=comparison,
                                  data=processed.quant)


  s1_tp = c("M1-M2", "M1-M3", "M1-M4", "M2-M3",
            "M2-M5", "M3-M4", "M3-M5", "M4-M5")
  s1_tn = c("M1-M5", "M2-M4")

  s2_tp = c("M1-M2", "M1-M3", "M1-M4", "M1-M5",
            "M2-M3", "M2-M5", "M3-M4", "M4-M5")
  s2_tn = c("M3-M5", "M2-M4")

  s3_tp = c("M1-M2", "M1-M3", "M1-M5", "M2-M3",
            "M2-M4", "M2-M5", "M3-M4", "M4-M5")
  s3_tn = c("M3-M5", "M1-M4")

  tp = unique((test.MSstats$ComparisonResult %>% filter((grepl("SS1", Protein) &
                                                    (Label %in% s1_tp) & adj.pvalue < .05) |
                                                   (grepl("SS2", Protein) &
                                                      (Label %in% s2_tp) & adj.pvalue < .05) |
                                                   (grepl("SS3", Protein) &
                                                      (Label %in% s3_tp) & adj.pvalue < .05)
                                                 ) %>%
                 mutate(PL = paste(Protein, Label, sep="_")) %>% select(PL))[[1]])
  fp = unique((test.MSstats$ComparisonResult %>% filter((grepl("SS1", Protein) &
                                                    (Label %in% s1_tn) & adj.pvalue < .05) |
                                                   (grepl("SS2", Protein) &
                                                      (Label %in% s2_tn) & adj.pvalue < .05) |
                                                   (grepl("SS3", Protein) &
                                                      (Label %in% s3_tn) & adj.pvalue < .05) |
                                                   (!grepl("SS", Protein) & adj.pvalue < .05)) %>%
                 mutate(PL = paste(Protein, Label, sep="_")) %>% select(PL))[[1]])

  fn = unique((test.MSstats$ComparisonResult %>% filter((grepl("SS1", Protein) &
                                                    (Label %in% s1_tp) & adj.pvalue >= .05) |
                                                   (grepl("SS2", Protein) &
                                                      (Label %in% s2_tp) & adj.pvalue >= .05) |
                                                   (grepl("SS3", Protein) &
                                                      (Label %in% s3_tp) & adj.pvalue >= .05)
                                                 ) %>%
                 mutate(PL = paste(Protein, Label, sep="_")) %>% select(PL))[[1]])
  tn = unique((test.MSstats$ComparisonResult %>% filter((grepl("SS1", Protein) &
                                                    (Label %in% s1_tn) & adj.pvalue >= .05) |
                                                   (grepl("SS2", Protein) &
                                                      (Label %in% s2_tn) & adj.pvalue >= .05) |
                                                   (grepl("SS3", Protein) &
                                                      (Label %in% s3_tn) & adj.pvalue >= .05) |
                                                   (!grepl("SS", Protein) & adj.pvalue >= .05)) %>%
                 mutate(PL = paste(Protein, Label, sep="_")) %>% select(PL))[[1]])

  return(list("TP" = tp, "FP" = fp, "FN" = fn, "TN" = tn))
}


all_features = compare_models(quant, "all", feature_filtering_info=FALSE)
top3_features = compare_models(quant, "top3", feature_filtering_info=FALSE)
top10_features = compare_models(quant, "topN", feature_filtering_info=FALSE,
                                n_top_feature = 10)
highquality_features = compare_models(quant, "highQuality", TRUE)



library(VennDiagram)


venn.diagram(
  x = list(as.character(c(all_features$TP, all_features$FP)),
           as.character(c(top3_features$TP, top3_features$FP)),
           as.character(c(highquality_features$TP, highquality_features$FP))),
  category.names = c("All Features" , "Top 3 Features", "High Quality Features"),
  filename = "positives.png",
  output=TRUE,
  imagetype="png" ,
  height = 1500,
  width = 1500,
  resolution = 100,
  lwd = 2,
  fill = cbPalette[1:3],
  main.fontface = "bold",
  main.fontfamily="sans",
  # main.pos = c(.5,.965),
  fontface = "bold",
  cat.fontface = "bold",
  cex = 3,
  cat.cex = 3,
  # cat.pos = c(-40, 30),
  # cat.dist = c(.037, .03),
  main.cex = 2.8,
  main = "Differentially Abundant Proteins"
)



length(all_features$TP)
length(top3_features$TP)
highquality_features









##############################
## save the result
##############################

save(test.MSstats, file='test.MSstats.rda')
write.csv(test.MSstats, file='ControlMixture_DDA_Skyline_testResult_byMSstats.csv')


##############################
## Visualization of result
##############################
groupComparisonPlots(data=test.MSstats, type="VolcanoPlot",
                     width=6, height=6,
                     address="ControlMixture_DDA_Skyline_")

groupComparisonPlots(data=test.MSstats, type="ComparisonPlot",
                     width=6, height=6,
                     address="ControlMixture_DDA_Skyline_")


